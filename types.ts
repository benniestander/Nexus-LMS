// This file defines all the core data structures and types used throughout the application.

export enum Role {
  STUDENT = 'student',
  INSTRUCTOR = 'instructor',
  ADMIN = 'admin',
}

export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: Role;
  avatarUrl?: string;
  company?: string;
  bio?: string;
}

export interface Category {
  id: string;
  name: string;
  parentId: string | null;
}

export interface Course {
  id: string;
  title: string;
  description: string;
  thumbnail: string;
  categoryId: string;
  instructorId: string;
  instructorName: string;
  modules: Module[];
  totalLessons: number;
  estimatedDuration: number;
  hasQuizzes?: boolean;
  certificationPassRate?: number;
  isCertificationCourse?: boolean; // To track if a course offers a certificate
  finalExam?: QuizData; // End-of-course questionnaire for certification
}

export interface Module {
  id: string;
  courseId: string;
  title: string;
  lessons: Lesson[];
  order: number;
  quiz?: QuizData; // Optional quiz at the end of a module
}

export enum LessonType {
  TEXT = 'text',
  VIDEO = 'video',
  PDF = 'pdf',
  QUIZ = 'quiz',
}

export enum VideoProvider {
  YOUTUBE = 'youtube',
  VIMEO = 'vimeo',
  SELF_HOSTED = 'self_hosted',
}

export interface VideoData {
  provider: VideoProvider;
  url: string;
}

export interface Question {
  id: string;
  questionText: string;
  options: string[];
  correctAnswerIndex: number;
}

export interface QuizData {
  questions: Question[];
  passingScore: number;
}

export interface Lesson {
  id: string;
  moduleId: string;
  title: string;
  type: LessonType;
  content: {
    text?: string;
    videoData?: VideoData;
    pdfUrl?: string;
    quizData?: QuizData;
  };
  duration: number; // in minutes
  order: number;
}

export interface Enrollment {
  userId: string;
  courseId: string;
  progress: number;
  completedLessonIds: string[];
  // Key can be 'lesson-<id>', 'module-<id>', or 'course-<id>'
  quizScores: Record<string, { score: number; passed: boolean }>;
  lastAccessedLessonId?: string;
}

export interface QuizAttempt {
  id?: string; // Will be generated by DB
  userId: string;
  courseId: string;
  lessonId: string; // Can also be module or course ID for new quiz types
  score: number;
  passed: boolean;
  answers: Record<string, number>; // { questionId: selectedOptionIndex }
  submittedAt?: string; // ISO string, will be generated by DB
}

export interface EngagementData {
  name: string;
  value: number;
}

export interface Conversation {
  id: string;
  participantIds: string[];
  lastMessageTimestamp?: string;
}

export interface Message {
  id?: string;
  conversationId: string;
  senderId: string;
  subject?: string;
  content: string;
  timestamp: string;
  isRead?: boolean;
}

export interface CalendarEvent {
  id: string;
  userId: string;
  date: string; // YYYY-MM-DD
  title: string;
  courseId?: string;
  type: 'deadline' | 'live_session' | 'assignment';
  liveSessionId?: string;
}

export type HistoryAction = 'course_enrolled' | 'lesson_completed' | 'quiz_passed' | 'certificate_earned' | 'discussion_posted';

export interface HistoryLog {
  id: string;
  userId: string;
  action: HistoryAction;
  targetId: string;
  targetName: string;
  timestamp: string;
}

export interface LiveSession {
  id: string;
  title: string;
  description: string;
  dateTime: string; // ISO 8601
  duration: number; // in minutes
  instructorId: string;
  audience: 'all' | string; // 'all' or a courseId
}

export interface Attachment {
    id: string;
    type: 'video' | 'pdf' | 'image';
    url: string;
    name: string;
}

export interface DiscussionPost {
  id: string;
  lessonId: string;
  authorId: string;
  content: string; // Main text content
  attachments?: Attachment[]; // Optional attachments
  timestamp: string;
  parentPostId?: string;
  author: {
    id: string;
    firstName: string;
    lastName: string;
    avatarUrl?: string;
  };
  replies: DiscussionPost[];
}